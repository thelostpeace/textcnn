import torch
import torch.nn as nn
import torch.nn.functional as F
from transformers import BertModel, AdamW, BertConfig, BertPreTrainedModel

class BertPretrainClassification(BertPreTrainedModel):
    """
        Bert Pretrain Fine Tuning On Text Classification
    """
    def __init__(self, config):
        super().__init__(config)
        self.config = config
        #print(dir(self.config))
        self.bert = BertModel(config)
        self.fc_dropout = nn.Dropout(self.config.fc_dropout)
        self.fc = nn.Linear(config.hidden_size, self.config.num_labels)

        self.init_weights()
        pass

    def forward(self, input_ids, attention_mask, token_type_ids=None, position_ids=None, head_mask=None, inputs_embeds=None, labels=None, output_attentions=None):
        outputs = self.bert(
            input_ids=input_ids,
            attention_mask=attention_mask,
            token_type_ids=token_type_ids,
            position_ids=position_ids,
            head_mask=head_mask,
            inputs_embeds=inputs_embeds,
            output_attentions=output_attentions
        )

        pooled_output = outputs[1]

        pooled_output = self.fc_dropout(pooled_output)
        logits = self.fc(pooled_output)

        logits = logits.view(-1, self.config.num_labels)

        return logits
